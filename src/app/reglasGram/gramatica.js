/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,17],$V1=[1,23],$V2=[2,27],$V3=[2,11],$V4=[1,30],$V5=[2,62],$V6=[2,19,27],$V7=[2,29],$V8=[2,19],$V9=[2,62,64],$Va=[2,72],$Vb=[2,57],$Vc=[1,60],$Vd=[1,57],$Ve=[2,31,41,43],$Vf=[1,66],$Vg=[2,26],$Vh=[2,26,42],$Vi=[2,26,41,42],$Vj=[2,19,63],$Vk=[2,44],$Vl=[1,123],$Vm=[1,121],$Vn=[1,122],$Vo=[1,120],$Vp=[2,28,45,63],$Vq=[2,26,28,45,63];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"WISON":4,"inicio_sig":5,"EOF":6,"signo_interrogacion":7,"contenido":8,"fin_inicio":9,"¿":10,"?":11,"lex":12,"syn":13,"ini_lex":14,"cont_lex":15,"fin_lex":16,"LEX":17,"{":18,":":19,"}":20,"only_terminal":21,"ini_only_terminal":22,"flecha_only_terminal":23,"expresion_lex":24,"semi_only_terminal":25,";":26,"TERMINAL":27,"NOMBRE_TERMINAL":28,"<":29,"-":30,"COMILLA":31,"cont_expresion_lex":32,"cont_expr_regulares":33,"STRING":34,"INVALID":35,"symb_especiales":36,"*":37,"=":38,"+":39,"%":40,"(":41,")":42,"[":43,"]":44,"|":45,"param_cont_expr_regulares":46,"sig_cont_expr_regulares":47,"cont_expr_regulares_combinado":48,"expr_reg_comb":49,"cont_expr_reg_comb":50,"EXP_REG_ABC":51,"EXP_REG_NUM":52,"clausula_expr":53,"ini_syn":54,"cont_syn":55,"fin_syn":56,"SYNTAX":57,"no_terminales":58,"initial_prod":59,"producciones":60,"no_terminal":61,"NO_TERMINAL":62,"NOMBRE_PRODUCCION":63,"INITIAL_SYM":64,"sig_initial_prod":65,"produccion":66,"ini_produccion":67,"flecha_producion":68,"derivaciones":69,"derivacion":70,"$accept":0,"$end":1},
terminals_: {2:"error",4:"WISON",6:"EOF",10:"¿",11:"?",17:"LEX",18:"{",19:":",20:"}",26:";",27:"TERMINAL",28:"NOMBRE_TERMINAL",29:"<",30:"-",31:"COMILLA",34:"STRING",35:"INVALID",37:"*",38:"=",39:"+",40:"%",41:"(",42:")",43:"[",44:"]",45:"|",51:"EXP_REG_ABC",52:"EXP_REG_NUM",57:"SYNTAX",62:"NO_TERMINAL",63:"NOMBRE_PRODUCCION",64:"INITIAL_SYM"},
productions_: [0,[3,3],[5,3],[7,1],[7,1],[9,2],[9,1],[8,2],[12,3],[14,3],[14,1],[16,2],[16,2],[15,2],[15,1],[21,4],[25,1],[25,1],[22,2],[22,1],[23,2],[23,1],[24,3],[24,1],[24,1],[32,1],[32,1],[32,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[33,3],[33,1],[48,2],[48,1],[49,3],[50,1],[50,1],[50,1],[46,1],[46,1],[46,1],[47,1],[47,2],[47,1],[53,1],[53,1],[53,1],[13,3],[54,4],[54,1],[56,3],[56,1],[55,3],[58,2],[58,1],[61,3],[61,1],[59,2],[59,2],[65,2],[65,1],[60,2],[60,1],[66,4],[67,1],[68,2],[68,1],[69,2],[69,1],[70,1],[70,1],[70,1],[70,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            var elemento = {'id':'listaErrores','cont':arrayErrores};
            var elemento1 = {'id':'listaTerminales','cont':arrayTerminales};
            var elemento2 = {'id':'listaProducciones','cont':arrayProducciones};
            var elemento3 = {'id':'listaNoTerminales','cont':arrayNoTerminales};
            var elemento4 = {'id':'symInicial','cont':symInicial};
            array.push(elemento);
            array.push(elemento1);
            array.push(elemento2);
            array.push(elemento3);
            array.push(elemento4);
            var arrayAux = array;
            array = []; 
            arrayErrores = [];         
            arrayTerminales = [];
            arrayProducciones = [];
            arrayNoTerminales = [];
            return arrayAux;
        
break;
case 2: case 3: case 5: case 7: case 9: case 11: case 14: case 16: case 20: case 64: case 66: case 69: case 70: case 77: case 78: case 81:


        
break;
case 4: case 6: case 10: case 12: case 17: case 21: case 65: case 67: case 72: case 74: case 76: case 82: case 88:

            arrayErrores.push('error en la linea ' + (this._$.first_line) +
            ', columna ' + (this._$.first_column) + ' -> ' + yytext);
        
break;
case 8:

            /*this.$ = $$[$01];*/
        
break;
case 13:

             /*this.$ = Number(yytext); */

        
break;
case 15:

            var elemento = {'id': $$[$0-3] ,'cont':$$[$0-1]};
            arrayTerminales.push(elemento);
        
break;
case 18: case 23: case 47: case 49: case 51: case 84:

            this.$ = $$[$0];
        
break;
case 19:

             arrayErrores.push('error en la linea ' + (this._$.first_line) +
            ', columna ' + (this._$.first_column) + ' -> ' + yytext);
        
break;
case 22: case 63: case 75:

            this.$ = $$[$0-1];
        
break;
case 24: case 53: case 56: case 59:

            console.log('error ' + yytext);
            arrayErrores.push('error en la linea ' + (this._$.first_line) +
            ', columna ' + (this._$.first_column) + ' -> ' + yytext);
        
break;
case 25:

          this.$ = yytext;
        
break;
case 26: case 28:

          this.$ = '\\' + '\\' + yytext;
        
break;
case 27:

           this.$ = $$[$0];
        
break;
case 29:

            this.$ = '\\' + '\\' + yytext;
        
break;
case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 42: case 43: case 44:

            this.$ = '\\' + '\\'+ yytext;
        
break;
case 39:

             this.$ = '\\' + '\\'+ yytext;
        
break;
case 40:

            this.$ = '\\' + '\\' +yytext;
        
break;
case 41:

           this.$ = '\\' + '\\'+ yytext;
        
break;
case 45:

             this.$ = '\\' + '\\' +yytext;
        
break;
case 46:

            this.$ = '[' + $$[$0-1] + $$[$0] ;
        
break;
case 48:

            this.$ = $$[$0-1] + $$[$0];
        
break;
case 50:

            this.$ = '(' + $$[$0-1] + ')';
        
break;
case 52: case 55: case 57: case 60: case 61: case 62: case 80:

            this.$ = yytext;
        
break;
case 54:

            this.$ = 'a-zA-Z';
        
break;
case 58:

            this.$ = ']' + $$[$0];
        
break;
case 68:

           
        
break;
case 71:

            arrayNoTerminales.push($$[$0-1]);
        
break;
case 73:

            symInicial = $$[$0];
        
break;
case 79:

            var produccion = $$[$0-1];
            var elemento = {'id': $$[$0-3], 'cont': arrayDerivaciones };
            arrayProducciones.push(elemento);
            arrayDerivaciones = [];
        
break;
case 83:

            this.$ = $$[$0-1] + $$[$0]
        
break;
case 85: case 86:

            arrayDerivaciones.push(yytext);
            this.$ = yytext;
        
break;
case 87:

            arrayDerivaciones.push(yytext);
            this.$ = yytext;

        
break;
}
},
table: [{3:1,4:[1,2]},{1:[3]},{2:[1,6],5:3,7:4,10:[1,5]},{6:[1,7]},{2:[1,12],8:8,12:9,14:10,17:[1,11]},o($V0,[2,3]),o($V0,[2,4]),{1:[2,1]},{2:[1,15],9:13,11:[1,14]},{2:[1,19],13:16,54:17,57:[1,18]},{2:[1,24],15:20,21:21,22:22,27:$V1},{18:[1,25]},o($V2,[2,10]),{6:[2,2]},{4:[1,26]},{6:[2,6]},o($V3,[2,7]),{2:[1,31],55:27,58:28,61:29,62:$V4},{18:[1,32]},o($V5,[2,65]),{2:[1,36],16:33,19:[1,35],21:34,22:22,27:$V1},o($V6,[2,14]),{2:[1,39],23:37,29:[1,38]},{28:[1,40]},o($V7,$V8),{19:[1,41]},{6:[2,5]},{2:[1,44],19:[1,43],56:42},{2:[1,48],59:45,61:46,62:$V4,64:[1,47]},o($V9,[2,70]),{63:[1,49]},o($V9,$Va),{18:[1,50]},o($Vb,[2,8]),o($V6,[2,13]),{20:[1,51]},o($V7,$V8,{20:[1,52]}),{2:[1,56],24:53,31:[1,54],33:55,41:$Vc,43:$Vd,48:58,49:59},{30:[1,61]},o($Ve,[2,21]),o($V7,[2,18]),o($V2,[2,9]),o($V3,[2,63]),{20:[1,62]},o($V3,[2,67]),{60:63,63:$Vf,66:64,67:65},o($V9,[2,69]),{2:[1,69],63:[1,68],65:67},o($V9,$Va,{67:65,66:70,63:$Vf}),{26:[1,71]},{19:[1,72]},o($Vb,$V3),o($Vb,[2,12]),{2:[1,75],25:73,26:[1,74]},{10:[1,94],11:[1,93],18:[1,84],19:[1,95],20:[1,85],26:[1,92],29:[1,83],30:[1,82],31:[1,96],32:76,34:[1,77],35:[1,78],36:79,37:[1,80],38:[1,81],39:[1,86],40:[1,87],41:[1,88],42:[1,89],43:[1,90],44:[1,91],45:[1,97]},o($Vg,[2,23]),o($Vg,[2,24]),{2:[1,101],46:98,51:[1,99],52:[1,100]},o($Vh,[2,47],{49:102,41:$Vc}),o($Vi,[2,49]),{2:[1,106],28:[1,105],33:104,41:$Vc,43:$Vd,48:58,49:59,50:103},o($Ve,[2,20]),{20:[1,107]},o($V8,[2,68],{67:65,66:108,63:$Vf}),o($Vj,[2,78]),{2:[1,111],29:[1,110],68:109},o($V7,[2,80]),{63:[2,73]},{26:[1,112]},{63:[2,76]},{63:[2,74]},o($V9,[2,71]),o($V5,[2,64]),o($V6,[2,15]),o($V6,[2,16]),o($V6,$V0),{31:[1,113]},{31:[2,25]},{31:$Vg},{31:$V2},{31:[2,28]},{31:$V7},{31:[2,30]},{31:[2,31]},{31:[2,32]},{31:[2,33]},{31:[2,34]},{31:[2,35]},{31:[2,36]},{31:[2,37]},{31:[2,38]},{31:[2,39]},{31:[2,40]},{31:[2,41]},{31:[2,42]},{31:[2,43]},{31:$Vk},{31:[2,45]},{2:[1,116],44:[1,115],47:114},o($Vk,[2,54]),o($Vk,[2,55]),o($Vk,[2,56]),o($Vi,[2,48]),{42:[1,117]},{42:[2,51]},{42:[2,52]},{42:[2,53]},o($V3,[2,66]),o($Vj,[2,77]),{2:$Vl,28:$Vm,45:$Vn,63:$Vo,69:118,70:119},{38:[1,124]},o($Vp,[2,82]),{63:[2,75]},o($Vg,[2,22]),o($Vh,[2,46]),o($Vh,$Vb,{53:125,11:[1,128],37:[1,126],39:[1,127]}),o($Vh,[2,59]),o($Vi,[2,50]),{2:$Vl,26:[1,129],28:$Vm,45:$Vn,63:$Vo,70:130},o($Vq,[2,84]),o($Vq,[2,85]),o($Vq,[2,86]),o($Vq,[2,87]),o($Vq,[2,88]),o($Vp,[2,81]),o($Vh,[2,58]),o($Vh,[2,60]),o($Vh,[2,61]),o($Vh,$V5),o($Vj,[2,79]),o($Vq,[2,83])],
defaultActions: {7:[2,1],13:[2,2],15:[2,6],26:[2,5],67:[2,73],69:[2,76],70:[2,74],77:[2,25],78:[2,26],79:[2,27],80:[2,28],81:[2,29],82:[2,30],83:[2,31],84:[2,32],85:[2,33],86:[2,34],87:[2,35],88:[2,36],89:[2,37],90:[2,38],91:[2,39],92:[2,40],93:[2,41],94:[2,42],95:[2,43],96:[2,44],97:[2,45],104:[2,51],105:[2,52],106:[2,53],112:[2,75]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	/*Codigo Javascript Incrustado*/
    var array = []; 
    var arrayErrores = [];
    var arrayTerminales = [];
    var arrayProducciones = [];
    var arrayNoTerminales = [];
    var arrayDerivaciones = [];
    var symInicial;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 27;
break;
case 1:return 4;
break;
case 2:return 17;
break;
case 3:return 57;
break;
case 4:return 62;
break;
case 5:return 64;
break;
case 6:/* skip whitespace */
break;
case 7:/*NO hacer nada*/
break;
case 8:/*No hacer Nada*/
break;
case 9:return 51;
break;
case 10:return 52;
break;
case 11:return 28;
break;
case 12:return 63;
break;
case 13:return 'ENTERO';
break;
case 14:return 34;
break;
case 15:return 37;
break;
case 16:return 38;
break;
case 17:return 30;
break;
case 18:return 29;
break;
case 19:return 18;
break;
case 20:return 20;
break;
case 21:return 39;
break;
case 22:return 40;
break;
case 23:return 41;
break;
case 24:return 42;
break;
case 25:return 43;
break;
case 26:return 44;
break;
case 27:return 26;
break;
case 28:return 11;
break;
case 29:return 10;
break;
case 30:return 19;
break;
case 31:return 31;
break;
case 32:return 45;
break;
case 33:return 6;
break;
case 34:return 35;
break;
}
},
rules: [/^(?:Terminal\b)/,/^(?:Wison\b)/,/^(?:Lex\b)/,/^(?:Syntax\b)/,/^(?:No_Terminal\b)/,/^(?:Initial_Sim\b)/,/^(?:\s+)/,/^(?:#[^\n]*)/,/^(?:\/\*\*([^*]+|\*+[^/*]+)*\*+\/)/,/^(?:aA-zZ\b)/,/^(?:0-9\b)/,/^(?:\$_(_+|[a-zA-Z]+|[0-9]+)*)/,/^(?:%_(_+|[a-zA-Z]+|[0-9]+)*)/,/^(?:[0-9]+)/,/^(?:[a-zA-Z]+)/,/^(?:\*)/,/^(?:=)/,/^(?:-)/,/^(?:<)/,/^(?:\{)/,/^(?:\})/,/^(?:\+)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?:\?)/,/^(?:¿)/,/^(?::)/,/^(?:('|`|‘|’))/,/^(?:\|)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}